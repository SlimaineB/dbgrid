from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import duckdb
import os
import socket  # pour obtenir le hostname

app = FastAPI()

# Obtenir le nom d‚Äôh√¥te de la machine (utile en cluster)
hostname = socket.gethostname()
print(f"üñ•Ô∏è Backend d√©marr√© sur le noeud : {hostname}")

# Connexion √† DuckDB (embedded)
con = duckdb.connect(read_only = True)  # Connexion en lecture seule

# Charger l'extension httpfs si pr√©sente
ext_path = "/app/extensions/httpfs.duckdb_extension"
if os.path.isfile(ext_path):
    con.execute(f"LOAD '{ext_path}';")
else:
    print("‚ö†Ô∏è Warning: httpfs extension not found")

# Script d'initialisation custom au d√©marrage
init_script = os.getenv("INIT_SQL_PATH", "/app/init.sql")  # valeur par d√©faut
if os.path.isfile(init_script):
    print(f"üìú Executing init script: {init_script}")
    with open(init_script, "r") as f:
        con.execute(f.read())
else:
    print(f"‚ÑπÔ∏è No init script found at {init_script} ‚Äî skipping.")

# Mod√®le pour la requ√™te
class SQLRequest(BaseModel):
    query: str

# Endpoint principal
@app.post("/query")
def execute_query(req: SQLRequest):
    try:
        result = con.execute(req.query).fetchall()
        columns = [desc[0] for desc in con.description]
        return {
            "columns": columns,
            "rows": result,
            "hostname": hostname  # inclus le hostname dans la r√©ponse
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
